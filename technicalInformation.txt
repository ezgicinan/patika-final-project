>> npm init

index.js dosyanı oluştur.

>> npm express
>> npm i express 
(node_modules, package.json ve package-lock.json oluştu)

routes klasörü oluşturuyoruz.
index.js ilk uğranan yer.

>>npm i nodemon

controller class'ı açıldı ve login-register implement edildi.
router/auth.js oluşturuldu. Auth işlemleri burdan yönlendirilecek.

login ve register async edildi. Try-catch ile error mekanizması eklendi.

model ve service klasörleri oluşturuldu.
MongoDB için config işlemleri yapılıyor: 
-config/db.js oluşturuldu.
-mongo_url .env dosyasına kaydedildi.
-mongodb ilgili paketler için komutlar:
>> npm install mongoose -g
>> npm link mongoose
>> npm install bcrypt (Security için, şifreleme)
>> npm install --save dotenv
>> npm install mongoose
>> npm list mongoose
>> npm uninstall mongoose
>> npm install mongoose@8.5.2

Artık DB'ye başarıyla bağlanıyoruz.

User modelini ekliyoruz. /model/user.js
User service işlemlerini ekliyoruz, şifreleme ve token işlemleri

>> npm uninstall bcrypt
>> npm install bcryptjs
>> npm install jsonwebtoken

Controller/auth.js'e de servis requestlerimizi bağlıyoruz.
Login ve createUser işlemleri eklendi.
Update endpointi ve updateUser servisi eklendi.
Routes user oluşturuldu.
update, get ve delete servisleri oluşturuldu.

Dockerfile ve docker-compose.yaml oluşturuldu.
>> node -v
   v18.14.0
package.json scripti düzenle:
"scripts": {
    "test": "echo \"Error: no test specified\" && exit 1",
    "start": "node index.js"
  },
Docker commands:
>> docker-compose up

Bcrypt hata verirse bunu çalıştır:
npm uninstall bcrypt
npm install bcryptjs

>> docker ps
- container id'ni kopayala
>> docker logs 466a76f4e879

Middleware katmanı oluşturuldu. 
Aradaki istekler için gümrük memuru görevi görüyor.
User rotasına authMiddleware eklendi.

apache/kafka docker desktop search kısmından çalıştırıldı.
